package cpu;

import java.util.ArrayList;
import java.util.concurrent.ThreadLocalRandom;

public class Main {
	

	int PID_COUNTER = 0; 
	long TIME = 0;
	long WAITTIME = 0;
	long TURNAROUND = 0;
	boolean ISFULL = false; //keeps track of if the PTable is full
	int TOTAL = 0;
	int TOTALPID = 0;
	int BURST = 0;
	int ARRIVAL = 0;
	int REMAINING = 0;
	int INDEX = 0;
	int CREATEP = 0;
	int A_COUNTER = 0;
	boolean isDone = false;
	
	public Main(String[] args) {
		
		
		ArrayList<Process> PTable1 = new ArrayList<Process>();
		ArrayList<Process> PTable2 = new ArrayList<Process>();
		ArrayList<Process> PTable3 = new ArrayList<Process>();
		ArrayList<Process> PTable4 = new ArrayList<Process>();
		
		/*
		for(int i = 1; i < 31; i++)
			createProcess(PTable1, i);
		*/
		
		for(int i = 1; i < 31; i++) {
			FCFS(PTable1, i);
			System.out.println("For FCFS" + i + ", the total is: " + TIME + ", Turnaround time is: " + TURNAROUND + ", Waiting time is: " + WAITTIME);
			System.out.println("The actual total time is: " + TOTAL + ", and PID is: " + TOTALPID);
		}	
		/*
		for(int i = 1; i < 31; i++) {
			RR(PTable3, 10, i);	
			System.out.println("For RR 10, #" + i + " the total is: " + TIME + ", Turnaround time is: " + TURNAROUND + ", Waiting time is: " + WAITTIME);
			System.out.println("The actual total time is: " + TOTAL + ", and PID is: " + TOTALPID);
			reset();
		}*/
		
		for(int i = 1; i < 31; i++) {
			RR(PTable4, 200, i);
			System.out.println("For RR 200, #" + i + " the total is: " + TIME + ", Turnaround time is: " + TURNAROUND + ", Waiting time is: " + WAITTIME);
			System.out.println("The actual total time is: " + TOTAL + ", and PID is: " + TOTALPID);
		}
		
		for(int i = 1; i < 31; i++) {
			SRT(PTable2, 10);
			System.out.println("For STF, the total is: " + TIME + ", Turnaround time is: " + TURNAROUND + ", Waiting time is: " + WAITTIME);
			System.out.println("The actual total time is: " + TOTAL + ", and PID is: " + TOTALPID);
		}
	
	}

	void createProcess(ArrayList<Process> PTable, int lambda) 
	{
		for(int i = 0; i < lambda; i++) {
			
			//makes sure that the table doesn't exceed 10000
			if (PID_COUNTER >= 10000){
				ISFULL = true;
				return;
			}
			
			int arrival = A_COUNTER * 6;
			int PID = PID_COUNTER++;
			int burst = ThreadLocalRandom.current().nextInt(1, 200 + 1);;
			String state = "ready";
			int remaining = burst;
			
			//global variables used to check if our calculations are correct
			TOTAL += burst;
			TOTALPID++;
			
			Process p = new Process(PID, arrival, burst, state, remaining);
		
			PTable.add(p);
		}
		A_COUNTER++;
	}


	//returns the index of the process with the least remaining time from a process table
	int getShortestP(ArrayList<Process> PTable) {
		int index = 0;
		for(int i = 1; i < PTable.size(); i++) {
			if(PTable.get(i).getRemaining() <= PTable.get(i).getRemaining() && PTable.get(i).getState() == "ready") {
				index = i;
			}
		}
		return index;
	}

	//function to reset global variables so that we can reuse them
	void reset() 
	{
		PID_COUNTER = 0; 
		TIME = 0;
		WAITTIME = 0;
		TURNAROUND = 0;
		TOTAL = 0;
		TOTALPID = 0;
		ISFULL = false;
		BURST = 0;
		ARRIVAL = 0;
		REMAINING = 0;
		CREATEP = 0;
		INDEX = 0;
		A_COUNTER = 0;
	}

	void FCFS(ArrayList<Process> PTable, int lambda)
	{
		
		reset();
		
		//fills the table with some elements so the table wont be empty to begin with
		for(int i = 0; i < 10; i++) 
			createProcess(PTable, 1);
		
		for(int i = 0; i < 10000; i++) {
			//this is just for clarity in the code
			ARRIVAL = PTable.get(i).getArrival();
			BURST = PTable.get(i).getBurst();
			
			CREATEP += BURST;

			//creates a process every 6 seconds
			while(CREATEP >= 6 && !ISFULL) {
				createProcess(PTable, lambda);
				CREATEP -= 6;
			}
			
			WAITTIME = TIME - ARRIVAL - BURST;
			TURNAROUND = WAITTIME + BURST;
			TIME += BURST;		
		}
	}
	
	public ArrayList<Process> SRT(ArrayList<Process> PTable, int q) 
	{
		//reset the global variables
		reset();
		
		//fills the table with some elements so the table wont be empty to begin with
		for(int i = 0; i < 10; i++) 
			createProcess(PTable, 1);
		
		//main loop, repeats until 10000 processes are done
		while(PTable.size() != 0) {
			//returns the element with the shortest remaining time
			INDEX = getShortestP(PTable);
			
			//this is just for clarity in the code
			ARRIVAL = PTable.get(INDEX).getArrival();
			REMAINING = PTable.get(INDEX).getRemaining();
			
			if(REMAINING <= q) {
				//adds to TIME the amount of time the process was in the CPU
				TIME += REMAINING;
				WAITTIME += TIME - ARRIVAL - REMAINING;
				TURNAROUND += WAITTIME + REMAINING;
				
				CREATEP += REMAINING;
				PTable.get(INDEX).setRemaining(0);
				PTable.get(INDEX).setState("terminated");
				
				//removes element index from the table
				PTable.remove(INDEX);
			}
			
			else if (REMAINING > q) {
				TIME += q;
				TURNAROUND += q;
				
				//subtracts q from the remaining time of the element
				PTable.get(INDEX).setRemaining(REMAINING - q);
				CREATEP += q;
			}
			
			//creates a process every 6 seconds
			while(CREATEP >= 6 && !ISFULL) {
				createProcess(PTable, 1);
				CREATEP -= 6;
			}
		}
		
		return PTable;
	}

	//assume all the elements of PTable are sorted by arrival time so go through the array linearly


	public ArrayList<Process> RR(ArrayList<Process> PTable, int q, int lambda) 
	{
		//resets global variables so we can run the functions one after the other
		reset();
		
		//lets us know if all elements of the array are done in RR
		boolean isDone = false;
		int terminated = 0;
		
		//fills the table with some elements so the table wont be empty to begin with
		for(int i = 0; i < 10; i++) 
			createProcess(PTable, 10);
		
		//loops over the array until there are no more elements that need to access the CPU
		while(!isDone) {
			
			//this is just for clarity in the code
			ARRIVAL = PTable.get(INDEX).getArrival();
			REMAINING = PTable.get(INDEX).getRemaining();
			
			if(REMAINING <= q) {
				WAITTIME += TIME - ARRIVAL - REMAINING;
				TURNAROUND += WAITTIME + REMAINING;
				TIME += REMAINING;
				CREATEP += REMAINING;
				PTable.get(INDEX).setRemaining(0);
				PTable.get(INDEX).setState("terminated");	
				
				terminated++;
			}
			
			else {
				TIME += q;
				TURNAROUND += q;
				
				//subtracts q from the remaining time
				PTable.get(INDEX).setRemaining(REMAINING - q);
				CREATEP += q;
			}
			
			
			
			if(terminated == 10000)
				break;
			
			//creates a process every 6 seconds
			while(CREATEP >= 6 && !ISFULL) {
				createProcess(PTable, lambda);
				CREATEP -= 6;
			}
			
			//loop to make sure that the array is not done
			for(int i = 1; i < PTable.size(); i++) {
				if(PTable.get(i - 1).getState() == "ready") {
					isDone = false;
					break;
				}
				//cout +	isDone);
			}
			//incr index while making sure it loops back to the start
			INDEX = (INDEX + 1) % PTable.size();
		}
		return PTable;
	}

	

}

